"""
    Json2PythonObj.py
    This program reads in the IR JSON file generated by the IRModeler,
    and generates a new IR python object.

    Input:
    Output:

    How to use?
    $
"""

import sys

from IR import IRGraph
from IR import Node

DEFAULT_ID = -1
UNAVAILABLE = -1

def get_edges(edges: list, IR: IRGraph):
    """This function create, populate, and return new_edges,
    which holds node object and/or UNAVAILABLE value.
    """

    new_edges = []

    # Handle 2 cases:
    # (1)
    # (2)
    for edge_node_id in edges:
        if edge_node_id > UNAVAILABLE:
            for node in IR.nodes:
                if edge_node_id == node.id:
                    new_edges.append(node)
        else:
            new_edges.append(UNAVAILABLE)

    return new_edges

def get_adds(added: list, IR: IRGraph):
    """This function create, populate, and return new_adds,
    which holds node object.
    """

    new_adds = []

    # Handle 1 cases:
    # (1) Node pointing to other nodes. Find and add node object to edge.
    for add_node_id in added:
        for node in IR.nodes:
            if add_node_id == node.id:
                new_adds.append(node)

    return new_adds

def get_removes(removed: list, IR: IRGraph):
    """This function create, populate, and return new_removes,
    which holds node object.
    """

    new_removes = []

    # Handle 1 cases:
    # (1) Node pointing to other nodes. Find and add node object to edge.
    for rem_node_id in removed:
        for node in IR.nodes:
            if rem_node_id == node.id:
                new_removes.append(node)

    return new_removes

def get_replaces(replaced: dict, IR: IRGraph):
    """This function create, populate, and return new_replaces,
    which holds from-node to to-node element.
    """

    new_replaces = {}

    for from_id, to_id in replaced.items():
        from_node = None
        to_node = None
        for node in IR.nodes:
            if node.id == from_id:
                from_node = node
            elif node.id == to_node:
                to_node = node
        new_replaces[from_node] = to_node

    return new_replaces

def Json2PythonObj(irNodes: list, irId: int):
    """This function is the main function to form a python object from
    the loaded JSON data.
    """

    IR = IRGraph()
    IR.id = irId

    for jNode in irNodes:
        pNode = Node()

        pNode.ir_Id = irId
        pNode.id = jNode["id"]
        pNode.alive = jNode["alive"]
        pNode.size = jNode["size"]
        pNode.opcode = jNode["opcode"]
        pNode.address = jNode["address"]
        pNode.direct_vals = jNode["directValues"]

        IR.nodes.append(pNode)

    pNodeCtr = 0
    for jNode in irNodes:
        edges = get_edges(jNode["edges"], IR)
        added_nodes = get_adds(jNode["added"], IR)
        removed_nodes = get_removes(jNode["removed"], IR)
        replaced_nodes = get_replaces(jNode["replaced"], IR)

        pNode = IR.nodes[pNodeCtr]
        assert (
                pNode.id == jNode["id"]
        ), f"ERROR: pNode.id ({pNode.id}) != jNode.id({jNode.id}). pNodeCtr = {pNodeCtr}."
        pNode.edges = edges
        pNode.added_node = added_nodes
        pNode.removed_nodes = removed_nodes
        pNode.replaced_nodes = replaced_nodes
        IR.nodes[pNodeCtr] = pNode

        pNodeCtr += 1
    
    return IR
